{"changed":false,"filter":false,"title":"User.php","tooltip":"/micropost2/app/User.php","value":"<?php\n\nnamespace App;\n\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'name', 'email', 'password',\n    ];\n\n   \n    protected $hidden = [\n        'password', 'remember_token',\n    ];\n    public function microposts()\n    {\n        return $this->hasMany(Micropost::class);\n    }\n    \n     public function followings()\n    {\n        return $this->belongsToMany(User::class, 'user_follow', 'user_id', 'follow_id')->withTimestamps();\n    }\n\n    public function followers()\n    {\n        return $this->belongsToMany(User::class, 'user_follow', 'follow_id', 'user_id')->withTimestamps();\n    }\n    \n    \n    public function follow($userId)\n{\n    // confirm if already following\n    $exist = $this->is_following($userId);\n    // confirming that it is not you\n    $its_me = $this->id == $userId;\n\n    if ($exist || $its_me) {\n        // do nothing if already following\n        return false;\n    } else {\n        // follow if not following\n        $this->followings()->attach($userId);\n        return true;\n    }\n}\n\n    public function unfollow($userId)\n{\n    // confirming if already following\n    $exist = $this->is_following($userId);\n    // confirming that it is not you\n    $its_me = $this->id == $userId;\n\n\n    if ($exist && !$its_me) {\n        // stop following if following\n        $this->followings()->detach($userId);\n        return true;\n    } else {\n        // do nothing if not following\n        return false;\n    }\n}\n\n    public function is_following($userId) {\n    return $this->followings()->where('follow_id', $userId)->exists();\n    \n    \n}\n\n    public function feed_microposts()\n    {\n        $follow_user_ids = $this->followings()-> pluck('users.id')->toArray();\n        $follow_user_ids[] = $this->id;\n        return Micropost::whereIn('user_id', $follow_user_ids);\n    }\npublic function favoritepost()\n    {\n        return $this->belongsToMany(Micropost::class, 'favorites', 'user_id', 'microposts_id')->withTimestamps();\n    }\n\npublic function pushfavorite($micropostId)\n{\n    // confirm if already pushed favorite\n    $done = $this->is_pushing($micropostId);\n   \n\n    if ($done) {\n        // do nothing if already pushed favorite\n        return false;\n    } else {\n        // push fav if not pushed fav\n        $this->favoritepost()->attach($micropostId);\n        return true;\n    }\n}\n\npublic function drawfavorite($micropostId)\n{\n    $done = $this->is_pushing($micropostId);\n    if ($done) {\n        // stop faving if faving\n        $this->favoritepost()->detach($micropostId);\n        return true;\n    } else {\n        // do nothing if not faving\n        return false;\n    }\n}\n\npublic function is_pushing($micropostId) {\n    return $this->favoritepost()->where('microposts_id', $micropostId)->exists();\n}\n\n public function feed_favoriteposts()\n    {\n        $favorite_micropost_ids = $this->favoritepost()-> pluck('microposts.id')->toArray();\n        return Micropost::whereIn('user_id', $favorite_micropost_ids);\n    }\n}\n\n\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":1628,"scrollleft":4.5,"selection":{"start":{"row":125,"column":22},"end":{"row":125,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":100,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1529989614936}